import sys, os, subprocess, re
from glob import glob
from Bio import SeqIO

def get_fc_id(filePath):
    if re.search('SRP', filePath):
        return re.search('SRP[0-9]+', filePath).group()
    filePath = re.sub('EXTERNAL_[A-B]', 'EXTERNAL_', filePath)
    fcRe = re.compile("((?<=(_(A|B|D)))([A-Z0-9])*X(X|Y|2|3|F))|((?<=_)000000000-C[A-Z0-9]{4})|((?<=_)A[0-9a-zA-Z]+(M5|HV))")
    #fcRe = re.compile('((?<=(EXTERNAL_))|(?<=(_[A-B]))).*[X-Y][X-Y|2](?=/)')
    return fcRe.search(filePath).group()

def mergeFlowCellLibraries(inputFolder):
    """The goal of this script is to iterate through folders of output generated by running trinity,
       generate new headers for the fasta records which include flowcell and library identifiers,
       and then concatenate the results into one fasta file for easy upload to IMGT for TCR analysis

       NOTE: IMGT has a limit of 500,000 fasta records per upload. It seems unlikely that those numbers
       will be exceeded with the current pipeline, but if so it will be advisable to autmatically split
       the output into multiples files in this script."""

    # Use inputFolder as filename-root and destination for output fasta file
    # Clean up folder path
    inputFolder = os.path.abspath(inputFolder)

    fileCnt = 1;
    outFilebase = '_combined%s.fa' % fileCnt
    outFilename = os.path.basename(inputFolder) + outFilebase
    outputFile = open(os.path.join(inputFolder, outFilename), 'w')

    contigCnt = 1;

    libFolderList = [os.path.join(inputFolder, folder)
                     for folder in os.listdir(inputFolder)
                     if re.search('lib', folder) or re.search('SRR', folder)]

    # For each folder inside input folder (libraries) find each trinity
    # assembly output and iterate through records
    # Warning: folders are assummed to contain 'lib' based on current
    # pipeline, but this could change
    for libFolder in libFolderList:
        libId = re.search('(lib|SRR)[0-9]+', libFolder).group()
        fcId = get_fc_id(libFolder)

        inFilename = os.path.join(libFolder, 'Trinity.fasta')
        try:
            fastaFile = open(inFilename, 'r')
        except IOError:
            fastaFile = open(libFolder, 'r')
        # For each fasta record, modify the header line to include flowcell
        # (inputFolder) and library (current folder) identifiers
        for record in SeqIO.parse(fastaFile, 'fasta'):
            header = ''.join(["FC-", fcId, "_Lib-", libId, "_ID-", record.id])
            record.id = header
            record.description = ' '.join(record.description.split()[1:])

            if len(record.seq) < 10000:
                # check number of contigs in file
                contigCnt += 1
                if contigCnt > 100000:
                    outputFile.close()

                    fileCnt += 1
                    outFilebase = '_combined%s.fa' % fileCnt
                    outFilename = os.path.basename(inputFolder) + outFilebase
                    outputFile = open(os.path.join(inputFolder, outFilename), 'w')

                    contigCnt = 1;
                    print(fileCnt)

                #write all records to the same output file
                SeqIO.write(record, outputFile, 'fasta')

        fastaFile.close()
    outputFile.close()

#If script called from command line parse arguments and call main function
if __name__ == '__main__':
    if len(sys.argv) == 2:
        mergeFlowCellLibraries(sys.argv[1])
    else:
        print("Error: script requires one argument; an input directory containing the library folders, each of which is required to contain a trinity.fasta assembly file.")
        sys.exit(1)
